/**
 * =====================================
 * ScriptRequiredParameterList ( scriptNameToParse )
 *
 * RETURNS:
 *		A return-delimited list of required script parameters according to the
 *		script name and the FileMakerStandards.org convention for listing
 *		parameters in script names.
 *
 * PARAMETERS:
 *		scriptNameToParse: A script name. Defaults to Get ( ScriptName ) when
 *		left empty.
 *
 * DEPENDENCIES: none
 *
 * HISTORY:
 *		CREATED on 2012-12-07 by Jeremy Bante <http://scr.im/jbante>.
 *
 * REFERENCES:
 *		http://filemakerstandards.org/display/cs/Script+naming
 * =====================================
 */

Case (
	/* Step 0, set-up */
	not $~step;
		Let ( [
			~length = Length ( scriptNameToParse );
			~start = Position ( scriptNameToParse ; "(" ; ~length ; -1 ) + 1;
			~endOptional = Position ( scriptNameToParse ; "{" ; ~start ; 1 );
			~endOptional =
				If ( ~endOptional = 0 ; ~length ; /* Else */ ~endOptional );
			~endRequired = Position ( scriptNameToParse ; ")" ; ~start ; 1 );
			~endRequired =
				If ( ~endRequired = 0 ; ~length ; /* Else */ ~endRequired );
			~end = Min ( ~endOptional ; ~endRequired );
			parameters =
				Middle (
					scriptNameToParse;
					~start;
					~end - ~start
				);
			parameters = Substitute ( parameters ; ";" ; Â¶ );
			$~parameterCount = ValueCount ( parameters );

			$~step = If ( IsEmpty ( parameters ) ; 2 ; /* Else */ 1 )
		];
			ScriptRequiredParameterList ( parameters )
		);

	/* Step 1, trim whitespace */
	$~step = 1;
		Let ( [
			$~i = $~i + 1;
			parameter = Trim ( GetValue ( scriptNameToParse ; $~i ) );
			$~result = List ( $~result ; parameter );
			$~step =
				If ( $~i < $~parameterCount ; $~step ; /* Else */ $~step + 1 )
		];
			ScriptRequiredParameterList ( scriptNameToParse )
		);

	/* Step 2, clean-up and return result */
	$~step = 2;
		Let ( [
			~result = $~result;

			// purge variables
			$~i = "";
			$~parameterCount = "";
			$~result = "";
			$~step = ""
		];
			~result
		)
)