/**
 * =====================================
 * #Filter ( parameters ; filterParameters )
 *
 * RETURNS:
 *		A list of Let notation name-value pairs from parameters with names in
 *		filterParameters. Any pairs with names not in filterParameters will not
 *		be included.
 *
 * PARAMETERS:
 *		parameters: A string of serialized name-value pair data in Let notation.
 *		filterParameters: A return-delimited list of parameter names to include
 *		in the result.
 *
 * EXAMPLE:
 *		#Assign ( #Filter (
 *			# ( "name" ; "value" )
 *			& # ( "foo" ; "bar" );
 *			List ( "name" ; "otherName" )
 *		) )
 *		// variable $name assigned "value"; $foo and $otherName are unaffected
 *
 * DEPENDENCIES: none
 *
 * HISTORY:
 *		CREATED on 2012-11-28 by Jeremy Bante <http://scr.im/jbante>.
 * =====================================
 */

Case (
	/* Step 0, set-up */
	not $~step;
		Let ( [
			~empty = IsEmpty ( parameters ) or IsEmpty ( filterParameters );
			filterParameters =	// add "$" prefix for matching
				Substitute ( ¶ & filterParameters ; ¶ ; "¶$" );
			filterParameters =	// add "$$" prefix for backwards-compatibility
				filterParameters
				& Substitute ( filterParameters ; ¶ ; "¶$" )
				& ¶;

			$~parameterCount = ValueCount ( parameters );
			$~step = If ( ~empty ; -1 ; /* Else */ 1 )
		];
			#Filter ( parameters ; filterParameters )
		);

	/* Step 1, do stuff */
	$~step = 1;
		Let ( [
			$~i = $~i + 1;
			~pair = GetValue ( parameters ; $~i );
			~name = Left ( ~pair ; Position ( ~pair ; " = " ; 1 ; 1 ) - 1 );
			$~result =	// only include ~pair if ~name is in filterParameters
				List (
					$~result;
					If ( Position ( filterParameters ; ¶ & ~name & ¶ ; 1 ; 1 ) > 0;
						~pair
					)
				);

			$~step =
				If ( $~i < $~parameterCount ; $~step ; /* Else */ $~step + 1 )
		];
			#Filter ( parameters ; filterParameters )
		);

	/* Step 2, clean-up and return result */
	$~step = 2 or $~step = -1;
		Let ( [
			~error = $~step = -1;
			~result = $~result;

			// purge variables
			$~i = "";
			$~parameterCount = "";
			$~result = "";
			$~step = ""
		];
			If ( ~error ; "" ; /* Else */ ~result )
		)
)